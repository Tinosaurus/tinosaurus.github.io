<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tino Roivanen´s Homepage</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Tino Roivanen´s Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2022 22:10:43 +0300</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using a cloud service API for something meanful.</title>
      <link>/posts/second-post/</link>
      <pubDate>Sun, 11 Sep 2022 22:10:43 +0300</pubDate>
      
      <guid>/posts/second-post/</guid>
      <description>This wasnt a big scale project by any means, but this is something that i found useful for myself. This project featured me using wttr.in to check the weather with a console orientated service. I configured it to print out the local weather for the 3 following days, at 4 diffrent times (Morning, Noon, Evening and Night)
Usage is simple(ish):
Use either curl, on linux based systems, or Invoke-RestMethod in PowerShell on windows as a base for all the commands.</description>
      <content>&lt;p&gt;This wasnt a big scale project by any means, but this is something that i found useful for myself. This project featured me
using &lt;a href=&#34;https://github.com/chubin/wttr.in&#34;&gt;wttr.in&lt;/a&gt; to check the weather with a console orientated service. I configured it to print out the local weather for the 3 following days, at 4 diffrent times (Morning, Noon, Evening and Night)&lt;/p&gt;
&lt;p&gt;Usage is simple(ish):&lt;/p&gt;
&lt;p&gt;Use either curl, on linux based systems, or Invoke-RestMethod in PowerShell on windows as a base for all the commands.&lt;/p&gt;
&lt;p&gt;Using&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl &lt;a href=&#34;https://wttr.in&#34;&gt;https://wttr.in&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Will print the data based on your IP-Adresses geolocational data.&lt;/p&gt;
&lt;p&gt;But, what if you use a VPN for example, to mask your geolocational data?&lt;/p&gt;
&lt;p&gt;Well, no problem. You can add the desired url to the end of your location. For example;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl &lt;a href=&#34;https://wttr.in/Helsinki&#34;&gt;https://wttr.in/Helsinki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also works on other location types, such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;City Names&lt;/li&gt;
&lt;li&gt;Airport Codes&lt;/li&gt;
&lt;li&gt;Area Codes&lt;/li&gt;
&lt;li&gt;GPS Coordinates&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The returned calls are largely customizeable, with things such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Weather Units&lt;/li&gt;
&lt;li&gt;Diffrent output formats (print a .png file for example)&lt;/li&gt;
&lt;li&gt;Print only one line of data&lt;/li&gt;
&lt;li&gt;Data-rich output format (Seems to have an limited amount of api calls)&lt;/li&gt;
&lt;li&gt;Moon phases and others, such as time of sunset and sunrise with a customizeable output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;So for example: The custom Output i  made looks like this (I have scrapped the location, as this is going to be public on the internet afterall.);&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ePd1nv0.png&#34; alt=&#34;The ready console print&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>My first post! A writedown of how this page came to be.</title>
      <link>/posts/my-first-post/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/my-first-post/</guid>
      <description>A short story on how i setup this website. I found this hugo theme after i got tired of my plain old website,and i wanted a challenge. So i started googling for some better solutions. Then i ended up on finding this framework for building websites called Hugo. and it looked robust enough, and easy enough to setup as a total newbie to webpage building. After looking around the hugo themes section, i found the perfect setup.</description>
      <content>&lt;h1 id=&#34;a-short-story-on-how-i-setup-this-website&#34;&gt;A short story on how i setup this website.&lt;/h1&gt;
&lt;p&gt;I found this hugo theme after i got tired of my plain old website,and i wanted a challenge. So i started googling for some better solutions.
Then i ended up on finding this framework for building websites called &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo.&lt;/a&gt; and it looked robust enough,
and easy enough to setup as a total newbie to webpage building. After looking around the hugo themes section, i found the perfect setup.
A lovely theme called &lt;a href=&#34;https://github.com/panr/hugo-theme-terminal&#34;&gt;Terminal by panr&lt;/a&gt;, and it looked really nice to my eye. So i started on my journey
to making my page with hugo. As in why this theme stood out to me, the pre-bundled themes did look really good in my eye. And hey, i love the color pink,
but theres also more color options.&lt;/p&gt;
&lt;p&gt;First thing that i needed to do, was to search for Hugo´s &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick start guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing that i did, was install hugo´s extended version. Using a packagemanager called &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;, it was easy as typing&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scoop install hugo-extended&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;into the command prompt after having installed scoop in the first place.&lt;/p&gt;
&lt;p&gt;Then i generated a new site using&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hugo new site quickstart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then i added the presupplied configuration file found on the github site of the terminal theme (linked above) with the terminal theme, into &lt;strong&gt;config.toml&lt;/strong&gt; file in the hugo root directory.&lt;/p&gt;
&lt;p&gt;Then i added the first blogpost with using&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hugo new posts/file-name-here.md&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And editing the new file, that was generated in the posts folder. As the .md extension implies, the site uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;Markdown technology.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The markdown syntax is still something new that im learning. So these blog posts might look prettier, some day i hope.&lt;/p&gt;
&lt;p&gt;at this point, i started the local envivorment by running&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hugo server -d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;in the command prompt, while being in the server root folder.&lt;/p&gt;
&lt;p&gt;That launched a local development server, that will autoupdate (a really nice feature.) into localhost:1313 by default.&lt;/p&gt;
&lt;p&gt;Once i had done the changes i wanted, i navigated to the root folder, and specified where hugo will build the static pages, by using&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hugo -D folder/path/here&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then i deployed this using the &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github pages&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;p&gt;Overall, this was a dive into something new, that i enjoyed doing.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
